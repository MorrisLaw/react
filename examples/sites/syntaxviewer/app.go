// Template generated by reactGen

package main

import (
	"bytes"
	"go/ast"
	"go/parser"
	"go/token"
	"strings"

	"mvdan.cc/sh/syntax"

	"honnef.co/go/js/dom"
	"myitcv.io/react"
)

type AppDef struct {
	react.ComponentDef
}

type Lang struct {
	Name  string
	Code  string
	Ast   string
	Error bool
}

type AppState struct {
	Go     *Lang
	Shell  *Lang
	Choice *Lang
}

func App() *AppElem {
	return buildAppElem()
}

func (a AppDef) GetInitialState() AppState {
	Go := &Lang{Name: "Go - go/ast"}
	Shell := &Lang{Name: "Shell - mvdan.cc/sh/syntax"}
	return AppState{
		Go:     Go,
		Shell:  Shell,
		Choice: Go,
	}
}

func (a AppDef) Render() react.Element {
	s := a.State().Choice

	outputClass := "ast"
	if s.Error {
		outputClass += " asterror"
	}

	buildLi := func(l *Lang) *react.LiElem {
		return react.Li(nil,
			react.A(
				&react.AProps{
					Href:    "#",
					OnClick: languageChange(a, l),
				},
				react.S(l.Name),
			),
		)
	}

	return react.Div(
		&react.DivProps{ClassName: "grid-container"},
		react.Div(
			&react.DivProps{ClassName: "header"},
			react.S("Syntax Viewer"),
			react.Div(
				&react.DivProps{ClassName: "dropdown", Style: &react.CSS{Float: "right"}},
				react.Button(
					&react.ButtonProps{
						ClassName: "btn btn-default dropdown-toggle",
						Type:      "button",
						ID:        "dropdownMenu1",
						DataSet:   react.DataSet{"toggle": "dropdown"},
						AriaSet: react.AriaSet{
							"haspopup": "true",
							"expanded": "true",
						},
					},
					react.S(s.Name+" "),
					react.Span(&react.SpanProps{ClassName: "caret"}),
				),
				react.Ul(
					&react.UlProps{
						ClassName: "dropdown-menu dropdown-menu-right",
						AriaSet:   react.AriaSet{"labelledby": "dropdownMenu1"},
					},
					buildLi(a.State().Go),
					buildLi(a.State().Shell),
				),
			),
		),
		react.Div(
			&react.DivProps{ClassName: "left"},
			react.TextArea(
				&react.TextAreaProps{
					ClassName:   "codeinput",
					Placeholder: "Your code here...",
					Value:       s.Code,
					OnChange:    inputChange(a),
				},
			),
		),
		react.Div(
			&react.DivProps{ClassName: "right"},
			react.Pre(
				&react.PreProps{ClassName: outputClass},
				react.S(s.Ast),
			),
		),
	)
}

func (a AppDef) handleEvent() {
	defer a.ForceUpdate()

	st := a.State().Choice
	st.Error = true
	st.Ast = ""

	if st.Code == "" {
		return
	}

	b := new(bytes.Buffer)

	switch st {
	case a.State().Go:
		fset := token.NewFileSet()
		f, err := parser.ParseFile(fset, "", st.Code, 0)
		if err != nil {
			st.Ast = err.Error()
			return
		}

		if err := ast.Fprint(b, fset, f, nil); err != nil {
			st.Ast = err.Error()
			return
		}

	case a.State().Shell:
		in := strings.NewReader(st.Code)
		f, err := syntax.NewParser().Parse(in, "stdin")
		if err != nil {
			st.Ast = err.Error()
			return
		}
		fprint(b, f, nil)
	}

	st.Ast = b.String()
	st.Error = false
}

type changeEvent struct {
	a AppDef
}

func languageChange(a AppDef, l *Lang) languageChangeEvent {
	return languageChangeEvent{
		changeEvent: changeEvent{
			a: a,
		},
		l: l,
	}
}

type languageChangeEvent struct {
	changeEvent
	l *Lang
}

func (l languageChangeEvent) OnClick(se *react.SyntheticMouseEvent) {
	st := l.a.State()
	st.Choice = l.l
	l.a.SetState(st)
	l.a.handleEvent()
}

func inputChange(a AppDef) inputChangeEvent {
	return inputChangeEvent{
		changeEvent: changeEvent{a: a},
	}
}

type inputChangeEvent struct {
	changeEvent
}

func (i inputChangeEvent) OnChange(se *react.SyntheticEvent) {
	target := se.Target().(*dom.HTMLTextAreaElement)
	st := i.a.State()
	st.Choice.Code = target.Value
	i.a.handleEvent()
}
